import nvdlib
import argparse
import logging
import os

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def search_by_cve(cve_id: str, api_key: str = None):
    """
    Search CVE by CVE ID.

    Args:
        cve_id (str): The CVE ID to search for.
        api_key (str): NVD API key.

    Returns:
        dict: A dictionary containing CVE details.
    """
    try:
        logging.info(f"Searching for CVE: {cve_id}")
        result = nvdlib.searchCVE(cveId=cve_id, key=api_key)[0]
        return {
            'severity': result.v31severity,
            'score': result.v31score,
            'description': result.descriptions[0].value,
            'vector': result.v31vector
        }
    except IndexError:
        logging.error(f"No results found for CVE ID {cve_id}.")
        return None


def search_by_keyword(keyword: str, api_key: str = None):
    """
    Search CVE by keyword.

    Args:
        keyword (str): The keyword to search for.
        api_key (str): NVD API key.

    Returns:
        list: A list of dictionaries containing CVE details.
    """
    try:
        logging.info(f"Searching for keyword: {keyword}")
        results = nvdlib.searchCVE(keywordSearch=keyword, key=api_key)
        cve_list = []
        for r in results:
            cve_list.append({
                'cve_id': r.id,
                'severity': r.v31severity,
                'score': r.v31score,
                'description': r.descriptions[0].value,
                'vector': r.v31vector
            })
        return cve_list
    except Exception as e:
        logging.error(f"An error occurred during the search: {e}")
        return []


def display_cve_info(cve_data):
    """
    Display CVE information in a formatted way.

    Args:
        cve_data (dict or list): CVE data to display.
    """
    if isinstance(cve_data, dict):
        print(f"\nCVE Found: {cve_data['description']}")
        print(f"Severity: {cve_data['severity']} - Score: {cve_data['score']}")
        print(f"Vector: {cve_data['vector']}\n")
    elif isinstance(cve_data, list):
        print(f"\nFound {len(cve_data)} CVEs for your keyword search:\n")
        for cve in cve_data:
            print(f"CVE ID: {cve['cve_id']}")
            print(f"Severity: {cve['severity']} - Score: {cve['score']}")
            print(f"Description: {cve['description']}")
            print(f"Vector: {cve['vector']}\n")


def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description='Search for CVEs by CVE ID or keyword')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--cve', help='Search by CVE ID')
    group.add_argument('--keyword', help='Search by keyword')
    parser.add_argument('--api-key', help='NVD API Key', default=os.getenv('NVD_API_KEY'))

    args = parser.parse_args()

    if args.cve:
        cve_info = search_by_cve(args.cve, args.api_key)
        if cve_info:
            display_cve_info(cve_info)
        else:
            print(f"No CVE found for ID: {args.cve}")

    elif args.keyword:
        cve_list = search_by_keyword(args.keyword, args.api_key)
        if cve_list:
            display_cve_info(cve_list)
        else:
            print(f"No CVEs found for keyword: {args.keyword}")


if __name__ == '__main__':
    main()